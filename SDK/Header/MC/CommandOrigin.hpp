// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#define AUTO_GENERATED
#include "../Global.h"
#include "Json.hpp"
#include "Bedrock.hpp"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here
class ServerPlayer;
class CommandArea;
enum CommandOriginType : char;

#undef BEFORE_EXTRA

class CommandOrigin {

#define AFTER_EXTRA
// Add Member There
public:
LIAPI ServerPlayer* getPlayer() const;

#undef AFTER_EXTRA
#ifndef DISABLE_CONSTRUCTOR_PREVENTION_COMMANDORIGIN
public:
    class CommandOrigin& operator=(class CommandOrigin const &) = delete;
    CommandOrigin(class CommandOrigin const &) = delete;
#endif

public:
    /*0*/ virtual ~CommandOrigin();
    /*1*/ virtual std::string const & getRequestId();
    /*2*/ virtual std::string getName();
    /*3*/ virtual class BlockPos getBlockPosition();
    /*4*/ virtual class Vec3 getWorldPosition();
    /*5*/ virtual class std::optional<class Vec2> getRotation();
    /*6*/ virtual class Level * getLevel();
    /*7*/ virtual class Dimension * getDimension();
    /*8*/ virtual class Actor * getEntity();
    /*9*/ virtual enum CommandPermissionLevel getPermissionsLevel();
    /*10*/ virtual std::unique_ptr<class CommandOrigin> clone();
    /*11*/ virtual class std::optional<class BlockPos> getCursorHitBlockPos();
    /*12*/ virtual class std::optional<class Vec3> getCursorHitPos();
    /*13*/ virtual bool hasChatPerms() const;
    /*14*/ virtual bool hasTellPerms() const;
    /*15*/ virtual bool canUseAbility(enum AbilitiesIndex) const;
    /*16*/ virtual bool isWorldBuilder() const;
    /*17*/ virtual bool canUseCommandsWithoutCheatsEnabled();
    /*18*/ virtual bool isSelectorExpansionAllowed() const;
    /*19*/ virtual class NetworkIdentifier const & getSourceId() const;
    /*20*/ virtual enum SubClientId getSourceSubId();
    /*21*/ virtual class CommandOrigin const & getOutputReceiver() const;
    /*22*/ virtual struct CommandOriginIdentity getIdentity() const;
    /*23*/ virtual enum CommandOriginType getOriginType();
    /*24*/ virtual struct CommandOriginData toCommandOriginData() const;
    /*25*/ virtual class mce::UUID const & getUUID() const;
    /*26*/ virtual void handleCommandOutputCallback(int, std::string &&, class Json::Value &&);
    /*27*/ virtual void updateValues();
    /*28*/ virtual class Vec3 const getExecutePosition(int, class CommandPositionFloat const &) const;
    /*29*/ virtual class CompoundTag serialize() const;
    /*30*/ virtual bool isValid();
    /*31*/ virtual void _setUUID(class mce::UUID const &);
#ifdef ENABLE_VIRTUAL_FAKESYMBOL_COMMANDORIGIN
#endif
    MCAPI CommandOrigin();
    MCAPI std::unique_ptr<class CommandArea> getAreaAt(class BlockPos const &, class BlockPos const &, int, bool) const;
    MCAPI std::unique_ptr<class CommandArea> getAreaAt(class BlockPos const &, int) const;
    MCAPI std::unique_ptr<class CommandArea> getAreaAtWithBuffer(class BlockPos const &, class BlockPos const &, int, bool) const;
    MCAPI std::unique_ptr<class CommandArea> getAreaAtWithBuffer(class BlockPos const &, int) const;
    MCAPI static std::unique_ptr<class CommandOrigin> fromCommandOriginData(struct CommandOriginData const &, class Bedrock::NonOwnerPointer<class ILevel> const &, class NetworkIdentifier const &, enum SubClientId);

//protected:

protected:
    MCAPI static class NetworkIdentifier sUnknownSource;

};