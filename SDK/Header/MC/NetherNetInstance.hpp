// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#define AUTO_GENERATED
#include "../Global.h"
#include "Bedrock.hpp"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here

#undef BEFORE_EXTRA

struct NetherNetInstance {

#define AFTER_EXTRA
// Add Member There

#undef AFTER_EXTRA
#ifndef DISABLE_CONSTRUCTOR_PREVENTION_NETHERNETINSTANCE
public:
    struct NetherNetInstance& operator=(struct NetherNetInstance const &) = delete;
    NetherNetInstance(struct NetherNetInstance const &) = delete;
    NetherNetInstance() = delete;
#endif
public:
#ifdef ENABLE_VIRTUAL_FAKESYMBOL_NETHERNETINSTANCE
    MCVAPI void _onDisable();
    MCVAPI void _onEnable();
    MCVAPI void addConnectionStateListener(class Connector::ConnectionStateListener *);
    MCVAPI bool connect(void *);
    MCVAPI void disconnect();
    MCVAPI class Social::GameConnectionInfo const & getConnectedGameInfo() const;
    MCVAPI unsigned short getIPv4Port() const;
    MCVAPI unsigned short getIPv6Port() const;
    MCVAPI std::string getLocalIp();
    MCVAPI std::vector<std::string> getLocalIps() const;
    MCVAPI struct Connector::NatPunchInfo getNatPunchInfo() const;
    MCVAPI unsigned short getPort() const;
    MCVAPI std::vector<struct RakNet::SystemAddress> getRefinedLocalIps() const;
    MCVAPI unsigned __int64 getTransportIdentifier() const;
    MCVAPI bool host(struct ConnectionDefinition const &);
    MCVAPI bool isIPv4Supported() const;
    MCVAPI bool isIPv6Supported() const;
    MCVAPI bool isServer() const;
    MCVAPI void removeConnectionStateListener(class Connector::ConnectionStateListener *);
    MCVAPI void runEvents();
    MCVAPI void setupNatPunch(bool);
    MCVAPI void startNatPunchingClient(std::string const &, unsigned short);
    MCVAPI void tick();
#endif
    MCAPI NetherNetInstance(class std::shared_ptr<class Bedrock::Http::LibHttpClientInstance>);

};