// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#define AUTO_GENERATED
#include "../Global.h"
#include "Ability.hpp"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here
enum AbilitiesIndex : int16_t {
    Build = 0,
    Mine = 1,
    DoorsAndSwitches = 2,
    OpenContainers = 3,
    AttackPlayers = 4,
    AttackMobs = 5,
    OperatorCommands = 6,
    Teleport = 7,
    ExposedAbilityCount = 8,
    Invulnerable = 8,
    Flying = 9,
    MayFly = 10,
    Instabuild = 11,
    Lightning = 12,
    FlySpeed = 13,
    WalkSpeed = 14,
    Muted = 15,
    WorldBuilder = 16,
    NoClip = 17,
    AbilityCount = 18
};

enum class AdventureFlag : int
{
    WorldImmutable = 1,
    NoPvM = 2,
    NoMvP = 4,
    Unused = 8,
    ShowNameTags = 16,
    AutoJump = 32,
    AllowFlight = 64,
    NoClip = 128,
    WorldBuilder = 256,
    Flying = 512,
    Muted = 1024,
};
#undef BEFORE_EXTRA

class Abilities {

#define AFTER_EXTRA
// Add Member There
#undef AFTER_EXTRA

#ifndef DISABLE_CONSTRUCTOR_PREVENTION_ABILITIES
public:
    Abilities() = delete;
#endif


public:
#ifdef ENABLE_VIRTUAL_FAKESYMBOL_ABILITIES
#endif
    MCAPI Abilities(class Abilities const &);
    MCAPI Abilities(bool);
    MCAPI void addSaveData(class CompoundTag &) const;
    MCAPI void forEachAbility(class std::function<void (class Ability const &, enum AbilitiesIndex)> const &, enum Ability::Options) const;
    MCAPI void forEachAbility(class std::function<void (class Ability &, enum AbilitiesIndex)> const &, enum Ability::Options);
    MCAPI class Ability & getAbility(enum AbilitiesIndex);
    MCAPI class Ability const & getAbility(enum AbilitiesIndex) const;
    MCAPI bool getBool(enum AbilitiesIndex) const;
    MCAPI float getFloat(enum AbilitiesIndex) const;
    MCAPI bool isAnyAbilitySet() const;
    MCAPI bool loadSaveData(class CompoundTag const &);
    MCAPI class Abilities & operator=(class Abilities const &);
    MCAPI bool operator==(class Abilities const &) const;
    MCAPI void setAbility(enum AbilitiesIndex, class Ability const &);
    MCAPI void setAbility(enum AbilitiesIndex, float);
    MCAPI void setAbility(enum AbilitiesIndex, bool);
    MCAPI void setAbilityDiff(enum AbilitiesIndex, bool, bool &);
    MCAPI void setDefault();
    MCAPI void setFromPermissions(enum PlayerPermissionLevel);
    MCAPI void unSet(enum AbilitiesIndex);
    MCAPI void unSet();
    MCAPI static class Ability INVALID_ABILITY;
    MCAPI static std::string const SERIALIZATION_TAG;
    MCAPI static char const * getAbilityName(enum AbilitiesIndex);
    MCAPI static class Ability const & getDefault(enum AbilitiesIndex);
    MCAPI static enum AbilitiesIndex nameToAbilityIndex(std::string const &);

//private:


private:
    MCAPI static class std::array<char const *, 18> ABILITY_NAMES;


};