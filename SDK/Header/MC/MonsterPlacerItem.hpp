// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#define AUTO_GENERATED
#include "../Global.h"
#include "Item.hpp"

#define BEFORE_EXTRA

#undef BEFORE_EXTRA

class MonsterPlacerItem : public Item {

#define AFTER_EXTRA

#undef AFTER_EXTRA
#ifndef DISABLE_CONSTRUCTOR_PREVENTION_MONSTERPLACERITEM
public:
    class MonsterPlacerItem& operator=(class MonsterPlacerItem const &) = delete;
    MonsterPlacerItem(class MonsterPlacerItem const &) = delete;
    MonsterPlacerItem() = delete;
#endif

public:
    /*0*/ virtual ~MonsterPlacerItem();
    /*1*/ virtual void tearDown();
    /*3*/ virtual bool isExperimental(class ItemInstance const *) const;
    /*23*/ virtual void __unk_vfn_23();
    /*24*/ virtual void __unk_vfn_24();
    /*28*/ virtual void __unk_vfn_28();
    /*29*/ virtual void __unk_vfn_29();
    /*31*/ virtual bool isLiquidClipItem(int);
    /*32*/ virtual void __unk_vfn_32();
    /*38*/ virtual void __unk_vfn_38();
    /*39*/ virtual bool isValidAuxValue(int) const;
    /*41*/ virtual void __unk_vfn_41();
    /*42*/ virtual void __unk_vfn_42();
    /*44*/ virtual void __unk_vfn_44();
    /*45*/ virtual void __unk_vfn_45();
    /*46*/ virtual void saveAdditionalData(class ItemInstance const &, class CompoundTag &) const;
    /*47*/ virtual void readAdditionalData(class ItemInstance &, class CompoundTag const &) const;
    /*50*/ virtual bool dispense(class BlockSource &, class Container &, int, class Vec3 const &, signed char) const;
    /*56*/ virtual std::string buildDescriptionId(class ItemInstance const &) const;
    /*72*/ virtual struct TextureUVCoordinateSet const & getIcon(int, int, bool) const;
    /*74*/ virtual class Item & setIcon(std::string const &, int);
    /*76*/ virtual void __unk_vfn_76();
    /*81*/ virtual bool _useOn(class ItemInstance &, class Actor &, class BlockPos, signed char, float, float, float) const;
#ifdef ENABLE_VIRTUAL_FAKESYMBOL_MONSTERPLACERITEM
    MCVAPI class Color getBaseColor(class ItemInstance const &) const;
    MCVAPI class Color getSecondaryColor(class ItemInstance const &) const;
    MCVAPI bool isMultiColorTinted(class ItemInstance const &) const;
#endif
    MCAPI void setActorInfoRegistry(class ActorInfoRegistry *);
    MCAPI class Mob * spawnMobAt(class BlockSource &, enum ActorType, class Vec3 const &, class Vec3 const &, class ItemInstance const &, class Actor *) const;
    MCAPI static class Actor * spawnOrMoveAgent(class Vec3 const &, class Actor &);

};