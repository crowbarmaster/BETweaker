// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#define AUTO_GENERATED
#include "../Global.h"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here
class Actor;

#undef BEFORE_EXTRA

class ActorDamageSource {

#define AFTER_EXTRA
// Add Member There
public:
    LIAPI Actor* getEntity();

#undef AFTER_EXTRA
#ifndef DISABLE_CONSTRUCTOR_PREVENTION_ACTORDAMAGESOURCE
public:
    class ActorDamageSource& operator=(class ActorDamageSource const &) = delete;
    ActorDamageSource(class ActorDamageSource const &) = delete;
    ActorDamageSource() = delete;
#endif

public:
    /*0*/ virtual ~ActorDamageSource();
    /*1*/ virtual bool isEntitySource();
    /*2*/ virtual bool isChildEntitySource();
    /*3*/ virtual bool isBlockSource();
    /*4*/ virtual bool isFire() const;
    /*5*/ virtual bool isReducedByResistanceEffect() const;
    /*6*/ virtual bool isReducedByEnchantReduction() const;
    /*7*/ virtual bool isReducedByArmorReduction() const;
    /*8*/ virtual bool isFallingBlockDamage() const;
    /*9*/ virtual bool isFallDamage() const;
    /*10*/ virtual struct std::pair<std::string, std::vector<std::string>> getDeathMessage(std::string, class Actor *) const;
    /*11*/ virtual bool getIsCreative();
    /*12*/ virtual bool getIsWorldBuilder();
    /*13*/ virtual struct ActorUniqueID getEntityUniqueID();
    /*14*/ virtual enum ActorType getEntityType();
    /*15*/ virtual enum ActorCategory getEntityCategories();
    /*16*/ virtual bool getDamagingEntityIsCreative();
    /*17*/ virtual bool getDamagingEntityIsWorldBuilder();
    /*18*/ virtual struct ActorUniqueID getDamagingEntityUniqueID();
    /*19*/ virtual enum ActorType getDamagingEntityType();
    /*20*/ virtual enum ActorCategory getDamagingEntityCategories();
    /*21*/ virtual std::unique_ptr<class ActorDamageSource> clone() const;
#ifdef ENABLE_VIRTUAL_FAKESYMBOL_ACTORDAMAGESOURCE
#endif
    MCAPI ActorDamageSource(enum ActorDamageCause);
    MCAPI enum ActorDamageCause getCause() const;
    MCAPI void setCause(enum ActorDamageCause);
    MCAPI static std::vector<struct std::pair<std::string, enum ActorDamageCause>> generateDamageCauseCommandEnum();
    MCAPI static bool isDamageCausedByMob(enum ActorDamageCause);
    MCAPI static enum ActorDamageCause lookupCause(std::string const &);
    MCAPI static std::string const & lookupCauseName(enum ActorDamageCause);

};