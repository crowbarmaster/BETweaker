// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#define AUTO_GENERATED
#include "../Global.h"
#include "ScriptApi.hpp"
#include "Json.hpp"

#define BEFORE_EXTRA

#undef BEFORE_EXTRA

class ScriptEngine {

#define AFTER_EXTRA

#undef AFTER_EXTRA
#ifndef DISABLE_CONSTRUCTOR_PREVENTION_SCRIPTENGINE
public:
    class ScriptEngine& operator=(class ScriptEngine const &) = delete;
    ScriptEngine(class ScriptEngine const &) = delete;
    ScriptEngine() = delete;
#endif

public:
#ifdef ENABLE_VIRTUAL_FAKESYMBOL_SCRIPTENGINE
    MCVAPI void initResultObject(class ScriptApi::ScriptObjectHandle &);
    MCVAPI bool onLogReceived(std::string const &);
    MCVAPI void processAddFilterToQueryCallback(std::vector<class ScriptApi::ScriptObjectHandle> const &, class ScriptApi::ScriptObjectHandle &);
    MCVAPI void processApplyComponentChangesCallback(std::vector<class ScriptApi::ScriptObjectHandle> const &, class ScriptApi::ScriptObjectHandle &);
    MCVAPI void processBroadcastEventCallback(std::vector<class ScriptApi::ScriptObjectHandle> const &, class ScriptApi::ScriptObjectHandle &);
    MCVAPI void processCreateComponentCallback(std::vector<class ScriptApi::ScriptObjectHandle> const &, class ScriptApi::ScriptObjectHandle &);
    MCVAPI void processCreateEntityCallback(std::vector<class ScriptApi::ScriptObjectHandle> const &, class ScriptApi::ScriptObjectHandle &);
    MCVAPI void processDestroyComponentCallback(std::vector<class ScriptApi::ScriptObjectHandle> const &, class ScriptApi::ScriptObjectHandle &);
    MCVAPI void processDestroyEntityCallback(std::vector<class ScriptApi::ScriptObjectHandle> const &, class ScriptApi::ScriptObjectHandle &);
    MCVAPI void processGetComponentCallback(std::vector<class ScriptApi::ScriptObjectHandle> const &, class ScriptApi::ScriptObjectHandle &);
    MCVAPI void processGetEntitiesFromQueryCallback(std::vector<class ScriptApi::ScriptObjectHandle> const &, class ScriptApi::ScriptObjectHandle &);
    MCVAPI void processHasComponentCallback(std::vector<class ScriptApi::ScriptObjectHandle> const &, class ScriptApi::ScriptObjectHandle &);
    MCVAPI void processIsValidEntityCallback(std::vector<class ScriptApi::ScriptObjectHandle> const &, class ScriptApi::ScriptObjectHandle &);
    MCVAPI void processListenForEventCallback(std::vector<class ScriptApi::ScriptObjectHandle> const &, class ScriptApi::ScriptObjectHandle &);
    MCVAPI void processLogCallback(std::vector<class ScriptApi::ScriptObjectHandle> const &, class ScriptApi::ScriptObjectHandle &);
    MCVAPI void processRegisterComponentCallback(std::vector<class ScriptApi::ScriptObjectHandle> const &, class ScriptApi::ScriptObjectHandle &);
    MCVAPI void processRegisterQueryCallback(std::vector<class ScriptApi::ScriptObjectHandle> const &, class ScriptApi::ScriptObjectHandle &);
    MCVAPI void processRegisterSystemCallback(std::vector<class ScriptApi::ScriptObjectHandle> const &, class ScriptApi::ScriptObjectHandle &);
    MCVAPI ~ScriptEngine();
#endif
    MCAPI ScriptEngine(enum ScriptApi::ApiScriptType);
    MCAPI bool deserializeScriptObjectHandleToJson(class ScriptApi::ScriptObjectHandle const &, class Json::Value &);
    MCAPI bool fireEventToScript(class EventInfo const &, class ScriptApi::ScriptObjectHandle const &);
    MCAPI bool initializeEngine();
    MCAPI bool serializeJsonToScriptObjectHandle(class ScriptApi::ScriptObjectHandle &, class Json::Value const &);
    MCAPI void startScriptLoading();
    MCAPI static bool isScriptingEnabled();

//private:
    MCAPI void _addScriptToQueue(struct ScriptEngine::ScriptQueueData const &);
    MCAPI bool _getVersionInfo(class ScriptApi::ScriptObjectHandle const &, class ScriptApi::ScriptVersionInfo &);
    MCAPI bool _processSystemInitialize();
    MCAPI bool _processSystemShutdown();
    MCAPI bool _processSystemUpdate();
    MCAPI bool _runScript(struct ScriptEngine::ScriptQueueData const &);
    MCAPI bool _setVersionInfo(class ScriptApi::ScriptObjectHandle const &, class ScriptApi::ScriptVersionInfo const &);

private:

};