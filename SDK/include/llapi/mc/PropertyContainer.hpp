// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#define AUTO_GENERATED
#include "../Global.h"
#include "PropertyMetadata.hpp"

#define BEFORE_EXTRA

#undef BEFORE_EXTRA

class PropertyContainer {

#define AFTER_EXTRA

#undef AFTER_EXTRA
#ifndef DISABLE_CONSTRUCTOR_PREVENTION_PROPERTYCONTAINER
public:
    class PropertyContainer& operator=(class PropertyContainer const &) = delete;
    PropertyContainer(class PropertyContainer const &) = delete;
    PropertyContainer() = delete;
#endif

public:
#ifdef ENABLE_VIRTUAL_FAKESYMBOL_PROPERTYCONTAINER
#endif
    MCAPI PropertyContainer(class gsl::not_null<class std::shared_ptr<class PropertyGroup const>>, class RenderParams &);
    MCAPI void addAdditionalSaveDataToCompoundTag(class CompoundTag &) const;
    MCAPI void addEntryToSyncData(class PropertyMetadata const &, struct PropertySyncData &) const;
    MCAPI class std::optional<bool> getBoolValue(unsigned __int64) const;
    MCAPI class std::optional<unsigned __int64> getEnumIndexValue(unsigned __int64) const;
    MCAPI class std::optional<float> getFloatValue(unsigned __int64) const;
    MCAPI class std::optional<int> getIntValue(unsigned __int64) const;
    MCAPI bool getMolangValue(unsigned __int64, struct MolangScriptArg &) const;
    MCAPI void readLoadedProperties(class CompoundTag const &);
    MCAPI void setAliasProperties(class std::unordered_map<class HashedString, class std::shared_ptr<class Tag>, struct std::hash<class HashedString>, struct std::equal_to<class HashedString>, class std::allocator<struct std::pair<class HashedString const, class std::shared_ptr<class Tag>>>> const &, std::string const &, std::string const &);
    MCAPI void setBoolValue(unsigned __int64, bool);
    MCAPI void setEnumIndexValue(unsigned __int64, unsigned __int64);
    MCAPI void setFloatValue(unsigned __int64, float);
    MCAPI void setIntValue(unsigned __int64, int);
    MCAPI ~PropertyContainer();

//private:
    MCAPI void _addDataToCompoundTag(class CompoundTag &, class PropertyMetadata const &) const;
    MCAPI class std::optional<unsigned __int64> _getPropertyTypeArrayIndex(unsigned __int64, enum PropertyMetadata::ContainedType) const;
    MCAPI bool _readValueFromTag(class PropertyMetadata const &, class Tag const &);
    MCAPI bool _trySetEnumIndexByString(unsigned __int64, std::string const &);

private:

};