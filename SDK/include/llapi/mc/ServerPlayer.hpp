// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#define AUTO_GENERATED
#include "../Global.h"
#include "Actor.hpp"
#include "Bedrock.hpp"
#include "Player.hpp"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here
#include "Player.hpp"

#undef BEFORE_EXTRA

class ServerPlayer : public Player {

#define AFTER_EXTRA
// Add Member There

#undef AFTER_EXTRA
#ifndef DISABLE_CONSTRUCTOR_PREVENTION_SERVERPLAYER
public:
    class ServerPlayer& operator=(class ServerPlayer const &) = delete;
    ServerPlayer(class ServerPlayer const &) = delete;
    ServerPlayer() = delete;
#endif

public:
    /*10*/ virtual void initializeComponents(enum Actor::InitializationMethod, class VariantParameterList const &);
    /*12*/ virtual void _serverInitItemStackIds();
    /*14*/ virtual ~ServerPlayer();
    /*40*/ virtual void __unk_vfn_40();
    /*48*/ virtual void normalTick();
    /*60*/ virtual void __unk_vfn_60();
    /*67*/ virtual void __unk_vfn_67();
    /*81*/ virtual void __unk_vfn_81();
    /*84*/ virtual void __unk_vfn_84();
    /*87*/ virtual void __unk_vfn_87();
    /*95*/ virtual void __unk_vfn_95();
    /*98*/ virtual void __unk_vfn_98();
    /*105*/ virtual void __unk_vfn_105();
    /*107*/ virtual void __unk_vfn_107();
    /*108*/ virtual void __unk_vfn_108();
    /*110*/ virtual void __unk_vfn_110();
    /*114*/ virtual bool isValidTarget(class Actor *) const;
    /*141*/ virtual void handleEntityEvent(enum ActorEvent, int);
    /*152*/ virtual void setArmor(enum ArmorSlot, class ItemStack const &);
    /*162*/ virtual void setOffhandSlot(class ItemStack const &);
    /*167*/ virtual bool load(class CompoundTag const &, class DataLoadHelper &);
    /*180*/ virtual bool canChangeDimensionsUsingPortal() const;
    /*181*/ virtual void __unk_vfn_181();
    /*182*/ virtual void changeDimension(class AutomaticID<class Dimension, int>);
    /*183*/ virtual struct ActorUniqueID getControllingPlayer() const;
    /*184*/ virtual void checkFallDamage(float, bool);
    /*186*/ virtual void handleFallDistanceOnServer(float, float, bool);
    /*195*/ virtual void __unk_vfn_195();
    /*212*/ virtual void onEffectAdded(class MobEffectInstance &);
    /*213*/ virtual void onEffectUpdated(class MobEffectInstance &);
    /*214*/ virtual void onEffectRemoved(class MobEffectInstance &);
    /*220*/ virtual void __unk_vfn_220();
    /*221*/ virtual void __unk_vfn_221();
    /*247*/ virtual void __unk_vfn_247();
    /*250*/ virtual void __unk_vfn_250();
    /*252*/ virtual void die(class ActorDamageSource const &);
    /*268*/ virtual void __unk_vfn_268();
    /*276*/ virtual void __unk_vfn_276();
    /*283*/ virtual void __unk_vfn_283();
    /*284*/ virtual void knockback(class Actor *, int, float, float, float, float, float);
    /*297*/ virtual void aiStep();
    /*310*/ virtual void __unk_vfn_310();
    /*314*/ virtual void __unk_vfn_314();
    /*322*/ virtual void hurtArmorSlots(class ActorDamageSource const &, int, class std::bitset<4>);
    /*323*/ virtual void setDamagedArmor(enum ArmorSlot, class ItemStack const &);
    /*324*/ virtual void sendArmorDamage(class std::bitset<4>);
    /*325*/ virtual void sendArmor(class std::bitset<4>);
    /*335*/ virtual void clearVanishEnchantedItemsOnDeath();
    /*336*/ virtual void sendInventory(bool);
    /*348*/ virtual void __unk_vfn_348();
    /*362*/ virtual void __unk_vfn_362();
    /*364*/ virtual void prepareRegion(class ChunkSource &);
    /*365*/ virtual void destroyRegion();
    /*370*/ virtual void changeDimensionWithCredits(class AutomaticID<class Dimension, int>);
    /*371*/ virtual void tickWorld(struct Tick const &);
    /*372*/ virtual void __unk_vfn_372();
    /*374*/ virtual void moveView();
    /*375*/ virtual void moveSpawnView(class Vec3 const &, class AutomaticID<class Dimension, int>);
    /*378*/ virtual void checkMovementStats(class Vec3 const &);
    /*379*/ virtual void __unk_vfn_379();
    /*380*/ virtual void __unk_vfn_380();
    /*381*/ virtual void respawn();
    /*382*/ virtual void __unk_vfn_382();
    /*383*/ virtual void __unk_vfn_383();
    /*388*/ virtual void __unk_vfn_388();
    /*389*/ virtual void __unk_vfn_389();
    /*390*/ virtual void openTrading(struct ActorUniqueID const &, bool);
    /*392*/ virtual void __unk_vfn_392();
    /*393*/ virtual void openNpcInteractScreen(class std::shared_ptr<struct INpcDialogueData>);
    /*394*/ virtual void openInventory();
    /*395*/ virtual void __unk_vfn_395();
    /*396*/ virtual void __unk_vfn_396();
    /*397*/ virtual void displayTextObjectMessage(class TextObjectRoot const &, std::string const &, std::string const &);
    /*398*/ virtual void displayTextObjectWhisperMessage(class ResolvedTextObject const &, std::string const &, std::string const &);
    /*399*/ virtual void displayTextObjectWhisperMessage(std::string const &, std::string const &, std::string const &);
    /*400*/ virtual void displayWhisperMessage(std::string const &, std::string const &, std::string const &, std::string const &);
    /*402*/ virtual void stopSleepInBed(bool, bool);
    /*406*/ virtual void __unk_vfn_406();
    /*407*/ virtual void __unk_vfn_407();
    /*408*/ virtual bool isHostingPlayer() const;
    /*409*/ virtual bool isLoading() const;
    /*410*/ virtual bool isPlayerInitialized() const;
    /*411*/ virtual void __unk_vfn_411();
    /*414*/ virtual void setPlayerGameType(enum GameType);
    /*418*/ virtual void __unk_vfn_418();
    /*422*/ virtual void setContainerData(class IContainerManager &, int, int);
    /*423*/ virtual void slotChanged(class IContainerManager &, class Container &, int, class ItemStack const &, class ItemStack const &, bool);
    /*425*/ virtual void refreshContainer(class IContainerManager &);
    /*428*/ virtual bool isActorRelevant(class Actor const &);
    /*429*/ virtual bool isTeacher() const;
    /*430*/ virtual void onSuspension();
    /*431*/ virtual void onLinkedSlotsChanged();
    /*437*/ virtual void sendInventoryTransaction(class InventoryTransaction const &) const;
    /*438*/ virtual void sendComplexInventoryTransaction(std::unique_ptr<class ComplexInventoryTransaction>) const;
    /*439*/ virtual void sendNetworkPacket(class Packet &) const;
    /*440*/ virtual class PlayerEventCoordinator & getPlayerEventCoordinator();
    /*441*/ virtual class MoveInputHandler * tryGetMoveInputHandler() const;
    /*442*/ virtual enum InputMode getInputMode() const;
    /*443*/ virtual enum ClientPlayMode getPlayMode() const;
    /*444*/ virtual void reportMovementTelemetry(enum MovementEventType);
    /*445*/ virtual void __unk_vfn_445();
    /*448*/ virtual void addSavedChunk(class ChunkPos const &);
    /*451*/ virtual class Bedrock::NonOwnerPointer<class Editor::IEditorPlayer> getEditorPlayer() const;
    /*452*/ virtual void destroyEditorPlayer();
    /*453*/ virtual int _getSpawnChunkLimit() const;
    /*454*/ virtual void _updateChunkPublisherView(class Vec3 const &, float);
#ifdef ENABLE_VIRTUAL_FAKESYMBOL_SERVERPLAYER
    MCVAPI void frameUpdate(class FrameUpdateContextBase &);
    MCVAPI void openPortfolio();
#endif
    MCAPI ServerPlayer(class Level &, class PacketSender &, class NetworkHandler &, class ClientBlobCache::Server::ActiveTransfersManager &, enum GameType, class NetworkIdentifier const &, enum SubClientId, class std::function<void (class ServerPlayer &)>, class mce::UUID, std::string const &, std::string const &, std::unique_ptr<class Certificate>, int, bool, class EntityContext &);
    MCAPI void addActorToReplicationList(class gsl::not_null<class Actor *>, bool);
    MCAPI void checkCheating(class Vec3 const &);
    MCAPI void disconnect();
    MCAPI void doDeleteContainerManager(bool);
    MCAPI void doInitialSpawn();
    MCAPI class ItemStackNetManagerServer & getItemStackNetManagerServer();
    MCAPI class ServerMoveInputHandler * getServerMoveInputHandler();
    MCAPI void handleActorPickRequestOnServer(class Actor &, bool, bool);
    MCAPI void handleBlockPickRequestOnServer(class BlockPos const &, bool);
    MCAPI enum ContainerID openUnmanagedContainer();
    MCAPI void postLoad(bool);
    MCAPI void postReplicationTick(struct Tick const &);
    MCAPI void preReplicationTick(struct Tick const &);
    MCAPI void selectItem(class ItemStack const &);
    MCAPI void sendMobEffectPackets();
    MCAPI void sendPlayerOnGround();
    MCAPI void setClientChunkRadius(unsigned int);
    MCAPI void setInputMode(enum InputMode const &);
    MCAPI void setLocalPlayerAsInitialized();
    MCAPI void setPlayMode(enum ClientPlayMode const &);
    MCAPI void setPlayerInput(float, float, bool, bool);
    MCAPI void setSyncTimeIfClientServerPositionMatches(class Vec3 const &);
    MCAPI void triggerRespawnFromCompletingTheEnd();
    MCAPI static class ServerPlayer * tryGetFromEntity(class EntityContext &, bool);

//private:
    MCAPI bool _checkForLoadedTickingAreas() const;
    MCAPI void _logCDEvent(enum CrashDumpLogStringID, enum CrashDumpLogStringID, enum CrashDumpLogStringID, enum CrashDumpLogStringID);
    MCAPI enum ContainerID _nextContainerCounter();
    MCAPI void _removeNearbyEntities();
    MCAPI void _scanForNearbyActors();
    MCAPI void _setContainerManager(class std::shared_ptr<class IContainerManager>);
    MCAPI void _updateNearbyActors();

private:

};