// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#define AUTO_GENERATED
#include "../Global.h"
#include "Json.hpp"
#include "JsonUtil.hpp"
#include "reflection.hpp"
#include "Core.hpp"
#include "Item.hpp"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here

#undef BEFORE_EXTRA

class ComponentItem : public Item {

#define AFTER_EXTRA
// Add Member There

#undef AFTER_EXTRA
#ifndef DISABLE_CONSTRUCTOR_PREVENTION_COMPONENTITEM
public:
    class ComponentItem& operator=(class ComponentItem const &) = delete;
    ComponentItem(class ComponentItem const &) = delete;
    ComponentItem() = delete;
#endif

public:
    /*0*/ virtual ~ComponentItem();
    /*1*/ virtual bool initServer(class Json::Value &, class SemVersion const &);
    /*2*/ virtual void tearDown();
    /*3*/ virtual class ComponentItem & setDescriptionId(std::string const &);
    /*4*/ virtual std::string const & getDescriptionId() const;
    /*7*/ virtual void __unk_vfn_7();
    /*10*/ virtual void executeEvent(class ItemStackBase &, std::string const &, class RenderParams &) const;
    /*11*/ virtual void __unk_vfn_11();
    /*12*/ virtual bool isArmor() const;
    /*13*/ virtual bool isBlockPlanterItem() const;
    /*14*/ virtual void __unk_vfn_14();
    /*16*/ virtual void __unk_vfn_16();
    /*17*/ virtual bool isDamageable() const;
    /*18*/ virtual bool isDyeable() const;
    /*19*/ virtual bool isDye() const;
    /*22*/ virtual bool isFood() const;
    /*23*/ virtual bool isThrowable() const;
    /*24*/ virtual bool isUseable() const;
    /*25*/ virtual class ItemComponent * getComponent(class HashedString const &) const;
    /*27*/ virtual class IFoodItemComponent * getFood() const;
    /*30*/ virtual class Item & setMaxDamage(int);
    /*39*/ virtual std::unique_ptr<class CompoundTag> buildNetworkTag() const;
    /*40*/ virtual void initializeFromNetwork(class CompoundTag const &);
    /*41*/ virtual std::vector<std::string> validateFromNetwork(class CompoundTag const &);
    /*42*/ virtual enum BlockShape getBlockShape() const;
    /*43*/ virtual bool canBeDepleted() const;
    /*44*/ virtual bool canDestroySpecial(class Block const &) const;
    /*45*/ virtual int getLevelDataForAuxValue(int) const;
    /*47*/ virtual short getMaxDamage() const;
    /*48*/ virtual int getAttackDamage() const;
    /*50*/ virtual bool isGlint(class ItemStackBase const &) const;
    /*51*/ virtual void __unk_vfn_51();
    /*53*/ virtual void __unk_vfn_53();
    /*55*/ virtual bool canDestroyInCreative() const;
    /*56*/ virtual bool isDestructive(int) const;
    /*57*/ virtual bool isLiquidClipItem(int) const;
    /*59*/ virtual bool requiresInteract() const;
    /*60*/ virtual void appendFormattedHovertext(class ItemStackBase const &, class Level &, std::string &, bool) const;
    /*61*/ virtual bool isValidRepairItem(class ItemStackBase const &, class ItemStackBase const &, class BaseGameVersion const &) const;
    /*62*/ virtual int getEnchantSlot() const;
    /*63*/ virtual int getEnchantValue() const;
    /*64*/ virtual int getArmorValue() const;
    /*66*/ virtual void __unk_vfn_66();
    /*67*/ virtual bool isValidAuxValue(int) const;
    /*68*/ virtual int getDamageChance(int) const;
    /*70*/ virtual void __unk_vfn_70();
    /*71*/ virtual void __unk_vfn_71();
    /*72*/ virtual void __unk_vfn_72();
    /*73*/ virtual class mce::Color getColor(class CompoundTag const *, class ItemDescriptor const &) const;
    /*75*/ virtual void __unk_vfn_75();
    /*76*/ virtual void clearColor(class ItemStackBase &) const;
    /*78*/ virtual void setColor(class ItemStackBase &, class mce::Color const &) const;
    /*79*/ virtual void __unk_vfn_79();
    /*80*/ virtual void __unk_vfn_80();
    /*84*/ virtual class ItemStack & use(class ItemStack &, class Player &) const;
    /*85*/ virtual bool dispense(class BlockSource &, class Container &, int, class Vec3 const &, unsigned char) const;
    /*86*/ virtual enum ItemUseMethod useTimeDepleted(class ItemStack &, class Level *, class Player *) const;
    /*87*/ virtual void releaseUsing(class ItemStack &, class Player *, int) const;
    /*88*/ virtual float getDestroySpeed(class ItemStackBase const &, class Block const &) const;
    /*89*/ virtual void hurtActor(class ItemStack &, class Actor &, class Mob &) const;
    /*90*/ virtual void hitActor(class ItemStack &, class Actor &, class Mob &) const;
    /*91*/ virtual void hitBlock(class ItemStack &, class Block const &, class BlockPos const &, class Mob &) const;
    /*92*/ virtual bool mineBlock(class ItemInstance &, class Block const &, int, int, int, class Actor *) const;
    /*93*/ virtual bool mineBlock(class ItemStack &, class Block const &, int, int, int, class Actor *) const;
    /*94*/ virtual std::string buildDescriptionName(class ItemStackBase const &) const;
    /*95*/ virtual std::string buildDescriptionId(class ItemDescriptor const &, class CompoundTag const *) const;
    /*96*/ virtual std::string buildEffectDescriptionName(class ItemStackBase const &) const;
    /*100*/ virtual unsigned char getMaxStackSize(class ItemDescriptor const &) const;
    /*103*/ virtual class HashedString const & getCooldownType() const;
    /*104*/ virtual int getCooldownTime() const;
    /*116*/ virtual void initClient(class Json::Value &, class SemVersion const &);
    /*117*/ virtual class Item & setIconInfo(std::string const &, int);
    /*118*/ virtual struct ResolvedItemIconInfo getIconInfo(class ItemStackBase const &, int, bool) const;
    /*119*/ virtual std::string getInteractText(class Player const &) const;
    /*120*/ virtual int getAnimationFrameFor(class Mob *, bool, class ItemStack const *, bool) const;
    /*121*/ virtual bool isEmissive(int) const;
    /*124*/ virtual bool canBeCharged() const;
    /*129*/ virtual std::string getAuxValuesDescription() const;
    /*130*/ virtual bool _checkUseOnPermissions(class Actor &, class ItemStackBase &, unsigned char const &, class BlockPos const &) const;
    /*131*/ virtual bool _calculatePlacePos(class ItemStackBase &, class Actor &, unsigned char &, class BlockPos &) const;
    /*132*/ virtual bool _useOn(class ItemStack &, class Actor &, class BlockPos, unsigned char, class Vec3 const &) const;
#ifdef ENABLE_VIRTUAL_FAKESYMBOL_COMPONENTITEM
    MCVAPI int getVariant(int, int, bool) const;
    MCVAPI bool hasCustomColor(class ItemStackBase const &) const;
    MCVAPI bool isComponentBased() const;
    MCVAPI bool useVariant(int, int, bool) const;
#endif
    MCAPI ComponentItem(std::string const &, short);
    MCAPI void _addCerealItemsToMap();
    MCAPI class std::shared_ptr<class JsonUtil::JsonSchemaObjectNode<class JsonUtil::EmptyClass, class ComponentItem>> _buildItemsFileSchema(class std::shared_ptr<class JsonUtil::JsonSchemaObjectNode<class JsonUtil::EmptyClass, class ComponentItem>> &, bool, class SemVersion);
    MCAPI bool _validateClientSchemaAndInitItem(class Json::Value &, class SemVersion const &);
    MCAPI bool _validateServerSchemaAndInitItem(class Json::Value &, class SemVersion const &);
    MCAPI bool checkComponentDataForContentErrors() const;
    MCAPI bool executeTrigger(class ItemStackBase &, class DefinitionTrigger const &, class RenderParams &) const;
    MCAPI std::vector<std::string> const & getAliases() const;
    MCAPI bool isStorage() const;
    MCAPI bool parseJsonEvents(class Json::Value const &, class SemVersion const &);
    MCAPI static struct reflection::Schema createItemAbstractCerealSchema(std::string const &);
    MCAPI static void registerItemComponentTypes();
    MCAPI static bool upgradeJson(std::string &, class Core::Path const &, class std::optional<class SemVersion>);

//private:
    MCAPI std::unique_ptr<class CompoundTag> _buildItemPropertiesNetworkTag() const;
    MCAPI bool _doesNotTakeDurabilityDamage() const;
    MCAPI void _executeEvent(class ItemStackBase &, std::string const &, std::vector<struct std::pair<std::string const, std::string const>> &, class RenderParams &) const;
    MCAPI bool _forceExecuteTrigger(class ItemStackBase &, class DefinitionTrigger const &, std::vector<struct std::pair<std::string const, std::string const>> &, class RenderParams &) const;
    MCAPI void _loadComponentsFromNetworkTag(std::string const &, class CompoundTag const &);
    MCAPI void _loadItemPropertiesNetworkTag(class CompoundTag const &);
    MCAPI void _loadItemTagsNetworkTag(class ListTag const &);

private:
    MCAPI static class CerealDocumentUpgrader mDocumentUpgrader;

};