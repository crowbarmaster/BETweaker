// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#define AUTO_GENERATED
#include "../Global.h"

#define BEFORE_EXTRA

#undef BEFORE_EXTRA

class ItemRegistryRef {

#define AFTER_EXTRA

#undef AFTER_EXTRA
#ifndef DISABLE_CONSTRUCTOR_PREVENTION_ITEMREGISTRYREF
public:
    class ItemRegistryRef& operator=(class ItemRegistryRef const &) = delete;
    ItemRegistryRef(class ItemRegistryRef const &) = delete;
    ItemRegistryRef() = delete;
#endif

public:
#ifdef ENABLE_VIRTUAL_FAKESYMBOL_ITEMREGISTRYREF
#endif
    MCAPI void alterAvailableCreativeItems(class ActorInfoRegistry *, class LevelData &) const;
    MCAPI void clearItemAndCreativeItemRegistry() const;
    MCAPI void digestServerItemComponents(std::vector<struct std::pair<std::string, class CompoundTag>> const &) const;
    MCAPI class WeakPtr<class Item> getItem(class HashedString const &) const;
    MCAPI class WeakPtr<class Item> getItem(short) const;
    MCAPI int getItemCount() const;
    MCAPI class ItemEventResponseFactory * getItemResponseFactory() const;
    MCAPI void initCreativeItemsServer(class ActorInfoRegistry *, class BlockDefinitionGroup *, bool, class Experiments const &, class std::function<void (class ItemRegistryRef, class ActorInfoRegistry *, class BlockDefinitionGroup *, class CreativeItemRegistry *, bool, class BaseGameVersion const &, class Experiments const &)>) const;
    MCAPI bool isCreativeItem(class ItemInstance const &) const;
    MCAPI bool isUsingCombinedItemRegistry() const;
    MCAPI class WeakPtr<class Item> lookupByName(int &, int &, class std::basic_string_view<char, struct std::char_traits<char>>) const;
    MCAPI class WeakPtr<class Item> lookupByName(int &, class std::basic_string_view<char, struct std::char_traits<char>>) const;
    MCAPI class WeakPtr<class Item> lookupByName(class HashedString const &) const;
    MCAPI class WeakPtr<class Item> lookupByNameNoAlias(class HashedString const &) const;
    MCAPI class WeakPtr<class Item> lookupByNameNoAlias(class std::basic_string_view<char, struct std::char_traits<char>>) const;
    MCAPI class WeakPtr<class Item> lookupByNameNoParsing(int &, class HashedString const &) const;
    MCAPI class std::unordered_set<class Item const *, struct std::hash<class Item const *>, struct std::equal_to<class Item const *>, class std::allocator<class Item const *>> lookupByTag(struct ItemTag const &) const;
    MCAPI class WeakPtr<class Item> lookupByVanillaName(class HashedString const &) const;
    MCAPI void registerAlias(class HashedString const &, class HashedString const &, class BaseGameVersion const &) const;
    MCAPI class WeakPtr<class Item> registerComplexAlias(class HashedString const &, class std::function<class HashedString (short)>) const;
    MCAPI void registerLegacyMapping(class HashedString const &, class HashedString const &, class BaseGameVersion const &) const;
    MCAPI void setUseCombinedItemRegistryToggle(bool) const;
    MCAPI void setWorldBaseGameVersion(class BaseGameVersion const &) const;
    MCAPI void unregisterItem(class HashedString const &) const;
    MCAPI std::vector<std::string> validateServerItemComponents(std::vector<struct std::pair<std::string, class CompoundTag>> const &) const;
    MCAPI ~ItemRegistryRef();

//private:
    MCAPI class std::shared_ptr<class ItemRegistry> _lockRegistry() const;

private:
    MCAPI static class std::shared_ptr<class ItemRegistry> mCombinedItemRegistryInstance;

};