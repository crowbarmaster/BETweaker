// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#define AUTO_GENERATED
#include "../Global.h"
#include "Bedrock.hpp"
#include "Core.hpp"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here
enum PackType : char {
    Invalid = 0x0,
    Addon = 0x1,
    Cached = 0x2,
    CopyProtected = 0x3,
    Behavior = 0x4,
    PersonaPiece = 0x5,
    Resources = 0x6,
    Skins = 0x7,
    WorldTemplate = 0x8,
    Count = 0x9,
};

enum PackOrigin : int {
    _Unknown = 0x0,
    _RealmsUnknown = 0x1,
    Package = 0x2,
    Treatment = 0x3,
    Dev = 0x4,
    World = 0x5,
    User = 0x6,
    TempCache = 0x7,
    PremiumCache = 0x8,
    PremiumTempCache = 0x9,
};
#undef BEFORE_EXTRA

class PackSourceFactory {

#define AFTER_EXTRA
// Add Member There
	
#undef AFTER_EXTRA
#ifndef DISABLE_CONSTRUCTOR_PREVENTION_PACKSOURCEFACTORY
public:
    class PackSourceFactory& operator=(class PackSourceFactory const &) = delete;
    PackSourceFactory(class PackSourceFactory const &) = delete;
    PackSourceFactory() = delete;
#endif

public:
    /*0*/ virtual ~PackSourceFactory();
    /*1*/ virtual class WorldTemplatePackSource & createWorldTemplatePackSource(class gsl::not_null<class Bedrock::NonOwnerPointer<class WorldTemplateManager const>> const &, class mce::UUID const &, enum PackType, enum PackOrigin);
    /*2*/ virtual class WorldTemplatePackSource * getWorldTemplatePackSource(class mce::UUID const &, enum PackType) const;
    /*3*/ virtual class DirectoryPackSource & createDirectoryPackSource(class Core::Path const &, enum PackType, enum PackOrigin, bool);
    /*4*/ virtual class DirectoryPackSource * getDirectoryPackSource(class Core::Path const &, enum PackType) const;
    /*5*/ virtual class InPackagePackSource & createInPackagePackSource(enum PackType);
    /*6*/ virtual class InPackagePackSource * getInPackagePackSource(enum PackType);
    /*7*/ virtual class WorldHistoryPackSource & createWorldHistoryPackSource(class Core::Path const &, enum PackType);
    /*8*/ virtual class WorldHistoryPackSource * getWorldHistoryPackSource(class Core::Path const &, enum PackType) const;
    /*9*/ virtual class DirectoryPackSource * getDirectoryPackSourceContaining(struct PackIdVersion const &) const;
    /*10*/ virtual void removeFromDirectoryPackSource(class Core::Path const &);
    /*11*/ virtual class InPackagePackSource & createDynamicPackagePackSource(enum PackType);
    /*12*/ virtual class InPackagePackSource * getDynamicPackagePackSource(enum PackType);
    /*13*/ virtual void setDynamicPackagePacks(class std::shared_ptr<class IDynamicPackagePacks> const &);
    /*14*/ virtual void setDynamicPackageRoot(class Core::PathBuffer<std::string>);
#ifdef ENABLE_VIRTUAL_FAKESYMBOL_PACKSOURCEFACTORY
#endif
    MCAPI PackSourceFactory(class std::shared_ptr<class IInPackagePacks> const &);

};