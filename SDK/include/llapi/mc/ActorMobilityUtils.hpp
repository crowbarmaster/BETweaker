// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#define AUTO_GENERATED
#include "../Global.h"

#define BEFORE_EXTRA

#undef BEFORE_EXTRA

namespace ActorMobilityUtils {

#define AFTER_EXTRA

#undef AFTER_EXTRA
    MCAPI void actorSetSize(class StrictEntityContext &, class Vec2 const &, struct SynchedActorDataComponent &, struct AABBShapeComponent &, struct StateVectorComponent const &, class EntityModifierT<class EntityRegistryBase, class StrictEntityContext, class FlagComponent<struct WasPenetratingLastFrameFlag>> &, class ViewT<class StrictEntityContext, class EntityRegistryBase, struct Include<class FlagComponent<struct PlayerComponentFlag>>, struct OffsetsComponent>);
    MCAPI bool canBeginOrContinueClimbingLadder(struct AABBShapeComponent const &, struct ConstBlockSourceComponent const &, struct StateVectorComponent const &, struct SynchedActorDataComponent const &);
    MCAPI bool canPowerJump(struct SynchedActorDataComponent const &, struct AttributesComponent const *, bool);
    MCAPI void endJump(struct StateVectorComponent const &, struct MobJumpComponent &, struct SynchedActorDataComponent &, struct VehicleComponent const *, class ViewT<class StrictEntityContext, class EntityRegistryBase, struct Include<class FlagComponent<struct ParrotFlag>>, struct PassengerComponent const>, class EntityModifierT<class EntityRegistryBase, class StrictEntityContext, class FlagComponent<struct ExitFromPassengerFlag>, class FlagComponent<struct StopRidingRequestFlag>> &);
    MCAPI float getJumpPower(class JumpControlComponent const *, class FlagComponent<struct SquidFlag> const *);
    MCAPI class Vec3 getPosFromAABB(class AABB const &, float, class Vec2 const &);
    MCAPI bool isFlying(struct AbilitiesComponent const &);
    MCAPI bool isFree(class IConstBlockSource const &, class AABB const &, class Vec3 const &, float);
    MCAPI bool isImmersedInWater(class Vec3 const &, class IConstBlockSource const &, class Vec2 const &);
    MCAPI bool isImmobile(class StrictEntityContext const &, class ViewT<class StrictEntityContext, class EntityRegistryBase, struct SynchedActorDataComponent const, class Optional<class FlagComponent<struct ActorIsImmobileFlag>>> *, class ViewT<class StrictEntityContext, class EntityRegistryBase, struct Include<class FlagComponent<struct MobFlag>>, struct AttributesComponent const, class Optional<class FlagComponent<struct ActorIsKnockedBackOnDeathFlag>>> *, class ViewT<class StrictEntityContext, class EntityRegistryBase, struct SynchedActorDataComponent const, struct MobJumpComponent const, struct Include<class FlagComponent<struct OnGroundFlag>, class FlagComponent<struct HorseFlag>>, struct Exclude<class FlagComponent<struct MobAllowStandSlidingFlag>>> *, class ViewT<class StrictEntityContext, class EntityRegistryBase, class FlagComponent<struct HorseFlag>> *, class ViewT<class StrictEntityContext, class EntityRegistryBase, class FlagComponent<struct PlayerIsSleepingFlag> const, class FlagComponent<struct PlayerComponentFlag> const> *);
    MCAPI bool isInLava(class IConstBlockSource const &, struct AABBShapeComponent const &, struct SubBBsComponent const &);
    MCAPI bool isJumping(struct MobJumpComponent const &, struct AbilitiesComponent const *);
    MCAPI bool isSprinting(struct SynchedActorDataComponent const &);
    MCAPI bool isSwimming(struct SynchedActorDataComponent const &);
    MCAPI bool isUnderLiquid(class Vec3 const &, class Vec3 const &, class IConstBlockSource const &, enum MaterialType);
    MCAPI void moveBBs(class Vec3 const &, struct AABBShapeComponent &, struct SubBBsComponent &);
    MCAPI bool onClimbableBlock(struct AABBShapeComponent const &, struct ConstBlockSourceComponent const &, struct StateVectorComponent const &);
    MCAPI void setLocalPlayerSneaking(struct SynchedActorDataComponent &, struct PlayerActionComponent *, bool);
    MCAPI void setSprinting(struct AttributesComponent &, struct SynchedActorDataComponent &, class optional_ref<struct PlayerActionComponent>, bool);
    MCAPI bool shouldApplyWaterGravity(class NavigationComponent const *, class PhysicsComponent const *, class SynchedActorDataReader, class Vec3 const &, class IConstBlockSource const &, class Vec2 const &);
    MCAPI void updateBBFromDefinition(class StrictEntityContext &, class optional_ref<struct CollisionBoxDefinitionComponent const>, struct SynchedActorDataComponent &, struct AABBShapeComponent &, struct StateVectorComponent const &, class EntityModifierT<class EntityRegistryBase, class StrictEntityContext, class FlagComponent<struct WasPenetratingLastFrameFlag>> &, class ViewT<class StrictEntityContext, class EntityRegistryBase, struct Include<class FlagComponent<struct PlayerComponentFlag>>, struct OffsetsComponent>);

};