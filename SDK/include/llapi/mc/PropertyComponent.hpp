// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#define AUTO_GENERATED
#include "../Global.h"
#include "PropertyMetadata.hpp"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here

#undef BEFORE_EXTRA

class PropertyComponent {

#define AFTER_EXTRA
// Add Member There

#undef AFTER_EXTRA
#ifndef DISABLE_CONSTRUCTOR_PREVENTION_PROPERTYCOMPONENT
public:
    class PropertyComponent& operator=(class PropertyComponent const &) = delete;
    PropertyComponent(class PropertyComponent const &) = delete;
    PropertyComponent() = delete;
#endif

public:
#ifdef ENABLE_VIRTUAL_FAKESYMBOL_PROPERTYCOMPONENT
#endif
    MCAPI PropertyComponent(class gsl::not_null<class std::shared_ptr<class PropertyGroup const>>, class RenderParams &);
    MCAPI PropertyComponent(class PropertyComponent &&);
    MCAPI void addAdditionalSaveData(class CompoundTag &) const;
    MCAPI void applyPendingChanges(class std::unordered_map<unsigned __int64, class std::variant<int, float, bool, unsigned __int64>, struct std::hash<unsigned __int64>, struct std::equal_to<unsigned __int64>, class std::allocator<struct std::pair<unsigned __int64 const, class std::variant<int, float, bool, unsigned __int64>>>> const &);
    MCAPI bool getMolangValue(unsigned __int64, struct MolangScriptArg &) const;
    MCAPI enum PropertyMetadata::ContainedType getPropertyType(unsigned __int64) const;
    MCAPI bool hasDirtyProperties() const;
    MCAPI struct PropertySyncData packAllSyncData() const;
    MCAPI struct PropertySyncData packDirtySyncData();
    MCAPI void readLoadedProperties(class CompoundTag const &);
    MCAPI void setAliasProperties(class std::unordered_map<class HashedString, class std::shared_ptr<class Tag>, struct std::hash<class HashedString>, struct std::equal_to<class HashedString>, class std::allocator<struct std::pair<class HashedString const, class std::shared_ptr<class Tag>>>> const &, std::string const &, std::string const &);
    MCAPI class std::optional<bool> tryGetBool(unsigned __int64) const;
    MCAPI class std::optional<float> tryGetFloat(unsigned __int64) const;
    MCAPI class std::optional<int> tryGetInt(unsigned __int64) const;
    MCAPI class HashedString const * tryGetString(unsigned __int64) const;
    MCAPI ~PropertyComponent();

};