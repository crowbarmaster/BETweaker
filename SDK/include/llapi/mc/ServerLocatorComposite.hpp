// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#define AUTO_GENERATED
#include "../Global.h"
#include "RakNet.hpp"
#include "RakPeerHelper.hpp"
#include "Bedrock.hpp"

#define BEFORE_EXTRA

#undef BEFORE_EXTRA

class ServerLocatorComposite {

#define AFTER_EXTRA

#undef AFTER_EXTRA
#ifndef DISABLE_CONSTRUCTOR_PREVENTION_SERVERLOCATORCOMPOSITE
public:
    class ServerLocatorComposite& operator=(class ServerLocatorComposite const &) = delete;
    ServerLocatorComposite(class ServerLocatorComposite const &) = delete;
#endif

public:
    /*0*/ virtual ~ServerLocatorComposite();
    /*1*/ virtual void __unk_vfn_1();
    /*2*/ virtual void __unk_vfn_2();
    /*3*/ virtual void startAnnouncingServer(std::string const &, std::string const &, enum GameType, int, int, bool, bool, enum TransportLayer);
    /*4*/ virtual void stopAnnouncingServer();
    /*5*/ virtual void startServerDiscovery(struct PortPair);
    /*6*/ virtual void stopServerDiscovery();
    /*7*/ virtual void addCustomServer(class AsynchronousIPResolver const &, int);
    /*8*/ virtual void addCustomServer(std::string const &, int);
    /*9*/ virtual std::vector<struct PingedCompatibleServer> getServerList() const;
    /*10*/ virtual void clearServerList();
    /*11*/ virtual void update();
    /*12*/ virtual bool isIPv4Supported() const;
    /*13*/ virtual bool isIPv6Supported() const;
    /*14*/ virtual void setGetHostGUIDFn(class std::function<struct RakNet::RakNetGUID (void)> const &);
    /*15*/ virtual float getPingTimeForGUID(std::string const &);
    /*16*/ virtual void checkCanConnectToCustomServerAsync(std::string, int, class std::function<void (bool)>);
#ifdef ENABLE_VIRTUAL_FAKESYMBOL_SERVERLOCATORCOMPOSITE
#endif
    MCAPI ServerLocatorComposite();
    MCAPI void initializeRakNetServerLocator(class RakNetInstance &, class RakPeerHelper::IPSupportInterface &, std::vector<std::string>, bool, enum PermissionLAN, enum PermissionIPv6, class Bedrock::NonOwnerPointer<class AppPlatform> const &, class std::function<class std::unique_ptr<class RakNet::RakPeerInterface, void ( *)(class RakNet::RakPeerInterface *)> (void)> const &);
    MCAPI void setActiveTransportLayer(enum TransportLayer);
    MCAPI void setNetherNetServerLocator(class std::shared_ptr<struct NetherNetInstance> const &);

};